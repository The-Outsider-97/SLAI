model:
  name: SLAI-Agent
  version: v1.8

run:
  id_prefix: "run"
  output_dir: "logs/"
  plots_dir: "plots/"

preload_agents:
  - adaptive
  - alignment
  - evaluation
  - execution
  - language
  - learning
  - knowledge
  - safety
  - perception
  - planning
  - reasoning

shared_resources:
  memory:
    class: SharedMemory
    path: src.collaborative.shared_memory
    init_args:
      max_memory_mb: 500
      ttl_check_interval: 30
      
agent-network:
  adaptive:
    inherits: base
    class: AdaptiveAgent
    path: src.agents.adaptive_agent
    init_args:
      shared_memory: ${shared_memory}
      agent_factory: ${agent_factory}
      config:
        state_dim: 10
        num_actions: 2
        risk_threshold: 0.7
        replay_capacity: 100000
        priority_alpha: 0.6
        experience_staleness_days: 7
        per_beta: 0.4
      learning_params:
        learning_rate: 0.02
        exploration_rate: 0.2
        discount_factor: 0.95
    requires: [shared_memory]  

  alignment:
    inherits: base
    class: AlignmentAgent
    path: src.agents.alignment_agent
    init_args:
      shared_memory: ${shared_memory}
      agent_factory: ${agent_factory}
      sensitive_attrs: ["age", "gender"]
      config:
        memory:
          replay_buffer_size: 10000
          causal_window: 1000
          drift_threshold: 0.25
          retention_period: 365
        ethics:
          constraints:
            - "Do not generate discriminatory content"
            - "Uphold user dignity and agency"
            - "Avoid promoting misinformation"
            - "Respect user privacy and autonomy"
        value_model:
          embedding_dim: 128
          similarity_threshold: 0.85
          use_contextual_embedding: true
          weights:
            helpfulness: 0.6
            harmlessness: 0.2
            honesty: 0.2
        corrections:
          levels:
            - threshold: 0.1
              action: log_warning
            - threshold: 0.2
              action: adjust_reward
            - threshold: 0.3
              action: human_intervention
            - threshold: 0.5
              action: agent_suspension
          learning_rate: 0.01
          momentum: 0.9
        monitor:
          fairness_metrics:
            - demographic_parity
            - equal_opportunity
            - predictive_equality
          ethical_rules:
            privacy:
              - "No sharing of personally identifiable information (PII)"
            fairness:
              - "Avoid bias towards protected attributes like gender or race"
            transparency:
              - "Explain decisions if confidence is low"
          drift_threshold: 0.15
          audit_frequency: 1000
          adaptive_weights:
            fairness: 0.4
            ethics: 0.3
            safety: 0.3
      requires: [shared_memory]

  browser:
    inherits: base
    class: BrowserAgent
    path: src.agents.browser_agent
    interaction_script:
      - action: "scroll"
        params: {pixels: 500}
      - action: "click"
        params: {selector: ".load-more"}
      - action: "wait"
        params: {seconds: 2}
    init_args:
      shared_memory: ${shared_memory}
      agent_factory: ${agent_factory}
      headless: true
      user_agent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
      captcha_strategy: "auto-retry"
      max_retries: 3
      browser_timeout: 30
    requires: [reasoning, language, learning]

  evaluation:
    inherits: base
    class: EvaluationAgent
    path: src.agents.evaluation_agent
    init_args:
      shared_memory: ${shared_memory}
      agent_factory: ${agent_factory}
    threshold: 0.9
    requires: [shared_memory]

  execution:
    inherits: base
    class: ExecutionAgent
    path: src.agents.execution_agent
    init_args:
      shared_memory: ${shared_memory}
      agent_factory: ${agent_factory}
      config:
        timeout: 10
        user_agent: "EnhancedExecutionAgent/2.0"
        cache_dir: "cache/execution"
        max_retries: 3
        rate_limit: 5
        cookie_policy: "accept_all"
        browser_integration: "enhanced"
        browser_agent: "browser"
        browser_timeout: 30
        fallback_to_direct: true
    requires: [browser, safety]


  language:
    inherits: base  
    class: LanguageAgent
    path: src.agents.language_agent
    init_args:
      shared_memory: ${shared_memory}
      agent_factory: ${agent_factory}
      grammar: ${grammar}
      context:
        encoder_params:
          vocab_size: 50016
          embed_dim: 200
          num_layers: 6
          num_heads: 8
          ff_dim: 2048
          num_styles: 14
          dropout_rate: 0.1
          positional_encoding: "sinusoidal"
          max_length: 512
          device: "cpu"
      slai_lm: ${slai_lm}
    llm: SLAILM()  
    history: []  
    summary: null  
    memory_limit: 1000  
    enable_summarization: true  
    summarizer: null
    readonly_wordlist: true
    disable_synonym_training: true
    requires: [shared_memory]

  learning:
    inherits: base
    class: LearningAgent
    path: src.agents.learning_agent
    init_args:
      shared_memory: ${shared_memory}
      agent_factory: ${agent_factory}
      algorithm: dqn
      state_dim: 4
      action_dim: 2
      hidden_size: 128
    dqn:
      typw: dqn
      class: DQNAgent
      path: src.agents.learning.dqn
      learning_rate: 0.001
      buffer_size: 10000
      batch_size: 64
    maml:
      type: maml
      class: MAMLAgent
      path: src.agents.learning.maml_rl
      state_size: 52
      action_size: 3
      hidden_size: 64
      meta_lr: 0.001
      inner_lr: 0.01
      gamma: 0.99
    rsi:
      type: rl
      class: RLAgent
      path: src.agents.learning.rl_agent
      learning_rate: 0.01
      discount_factor: 0.99
      epsilon: 0.1
    rl:
      type: rsi
      calss: RSI_Agent
      path: src.agents.learning.rsi
      target_update_frequency: 100
      state_size: 52
      action_size: 3
      shared_memory: null
    epsilon: 0.1
    discount: 0.95
    memory_limit: 50000
    learning_rate: 0.001
    optimized_mode': True
    network_size': 128
    max_task_pool': 50
    requires: [shared_memory]

  knowledge:
    inherits: base
    class: KnowledgeAgent
    path: src.agents.knowledge_agent
    init_args:
      shared_memory: ${shared_memory}
      agent_factory: ${agent_factory}
      config:
        cache_size: 1500
        similarity_threshold: 0.25
        ontology:
          max_depth: 3
          inherit_types: true
        rules:
          apply_during_retrieval: true
      language_agent: ${language_agent}
      knowledge_agent_dir: "data/knowledge_base"
      persist_file: "data/knowledge_cache.json"


  safety:
    inherits: base
    class: SafeAI_Agent
    path: src.agents.safety_agent
    init_args:
      shared_memory: ${shared_memory}
      agent_factory: ${agent_factory}
      constitutional_rules:
        general: ["Do no harm", "Respect autonomy"]
        data: ["Avoid PII leakage"]
      risk_threshold:
        safety: 0.02
        privacy: 0.05
        security: 0.01
      audit_level: 3
      enable_rlhf: true
    requires: [shared_memory]

  perception:
    inherits: base
    class: PerceptionAgent
    path: src.agents.perception_agent
    init_args:
      shared_memory: ${shared_memory}
      agent_factory: ${agent_factory}
      modalities:
        - vision
        - text
        - audio
      embed_dim: 300
      projection_dim: 256
      batch_size: 8
      learning_rate: 0.001
      epochs: 20
    requires: [shared_memory]

  planning:
    inherits: base
    class: PlanningAgent
    path: src.agents.planning_agent
    init_args:
      shared_memory: ${shared_memory}
      agent_factory: ${agent_factory}

  reasoning:
    inherits: base
    class: ReasoningAgent
    path: src.agents.reasoning_agent
    init_args:
      shared_memory: ${shared_memory}
      agent_factory: ${agent_factory}
      tuple_key: ["subject", "predicate", "object"]
      config:
        storage_path: "src/agents/knowledge/knowledge_db.json"
        contradiction_threshold: 0.25
        rule_validation:
          enable: true
          min_soundness_score: 0.7
          max_circular_depth: 3
        nlp_integration:
          spacy_model: "en_core_web_lg"
          sentence_transformer: "all-MiniLM-L6-v2"
        inference:
          default_chain_length: 5
          neuro_symbolic_weight: 0.4
          max_hypotheses: 100
          exploration_rate: 0.1
          llm_fallback:
            enable: true
            temperature: 0.3
            max_tokens: 100
      llm: ${slai_lm}
      language_agent: ${language_agent}
    requires: [shared_memory, slai_lm, language_agent]

  base:
    abstract: true
    class: BaseAgent
    path: src.agents.base_agent
    init_args:
      shared_memory: ${shared_memory}
      agent_factory: ${agent_factory}
      config:
        logging_level: INFO
        max_retries: 3
        checkpoint_dir: "models/checkpoints/"
        enable_metrics: true
        timeout_seconds: 60


training:
  num_samples: 500

# ==========================
# Hyperparameters Definition
# ==========================

hyperparameters:
  - name: learning_rate
    type: float
    min: 0.0001
    max: 0.1
    prior: log-uniform
    steps: 5

  - name: num_layers
    type: int
    min: 1
    max: 10
    step: 1

  - name: batch_size
    type: int
    min: 16
    max: 256
    step: 16

  - name: optimizer
    type: categorical
    choices: [adam, sgd, rmsprop]

  - name: activation
    type: categorical
    choices: [relu, tanh, sigmoid]

  - name: dropout_rate
    type: float
    min: 0.0
    max: 0.5
    steps: 6

  - name: gamma
    type: float
    min: 0.8
    max: 0.999
    steps: 5

  - name: num_qubits
    type: int
    min: 2
    max: 6
  - name: num_quantum_layers
    type: int
    min: 1
    max: 4

# ==========================
# Thresholds and Alignment
# ==========================

alignment_thresholds:
  bias_threshold: 0.1
  reward_threshold: 70.0
  statistical_parity: 0.1
  equal_opportunity: 0.1
  predictive_parity: 0.1
  individual_fairness: 0.1

rollback:
  enabled: true
  strategy: "git_versioned"
  backup_dir: "models/backups/"

paths:
  models: "models/"


retrain:
  enabled: true
  trigger_on_violation: true

logging:
  log_file: "logs/app.log"
  level: INFO
  rotate: true
  max_size_mb: 50
  backup_count: 10

# ==========================
# Security Settings
# ==========================

security:
  encrypt_models: true
  enable_threat_detection: true
  adversarial_training: false
  backup_on_threat: true

# ==========================
# Data Autit
# ==========================

dataset_path: "data/dataset.csv"
config_path: "configs/config.yaml"
logs_path: "logs/"
audit_output_dir: "audits/"
processed_output_path: "data/processed_dataset.csv"

monitoring_weights:
  accuracy: 0.5
  f1_score: 0.3
  risk_score: 0.2

alert_thresholds:
  accuracy: 0.75
  risk_score: 0.25

security_policy:
  safe_ai:
    can_access_data: false
    can_modify_model: false
    can_export: false

  model_trainer:
    can_access_data: true
    can_modify_model: true
    can_export: true

# ==========================
# Compliance & Ethics
# ==========================
compliance:
  regulations:
    - GDPR
    - CCPA
  enable_audit: true
  anonymize_data: true
  consent_management: true

# ==========================
# Monitoring & Drift
# ==========================
monitoring:
  enable_monitoring: true
  drift_detection:
    enabled: true
    threshold: 0.05
  performance_monitoring:
    interval_seconds: 300  # 5 minutes
  alerting:
    enable_alerts: true
    alert_thresholds:
      performance_drop: 0.1
      bias_increase: 0.05

paths:
  data_source: "data/sample_dataset.csv"
